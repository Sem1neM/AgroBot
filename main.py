import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InputFile

API_TOKEN = 'token_here'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ö–æ–º–∞–Ω–¥–∞ start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! üöú –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–µ—Ä—ã –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –∏ –∫–æ–æ–ø–µ—Ä–∞—Ç–∏–≤–æ–≤.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∞—à–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:\n"
        "1Ô∏è‚É£ –°–∞–º–æ–∑–∞–Ω—è—Ç—ã–π\n"
        "2Ô∏è‚É£ –õ–∏—á–Ω–æ–µ –ø–æ–¥—Å–æ–±–Ω–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ\n"
        "3Ô∏è‚É£ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å\n"
        "4Ô∏è‚É£ –ò–ü –∏–ª–∏ –ì–ª–∞–≤–∞ –ö–§–•\n"
        "5Ô∏è‚É£ –Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ –∏–ª–∏ –∫–æ–æ–ø–µ—Ä–∞—Ç–∏–≤\n\n"
        "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /help."
    )

# –ö–æ–º–∞–Ω–¥–∞ help
@dp.message_handler(commands=['help'])
async def send_help(message: types.Message):
    await message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–∏—Ñ—Ä—É, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –≤–∞—à–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∏–¥–∞—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∏.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ü–∏—Ñ—Ä–∞–º–∏ (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
@dp.message_handler(lambda message: message.text.isdigit())
async def send_category_info(message: types.Message):
    category = int(message.text)
    response = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:"
    if category == 1:
        response += " –°–∞–º–æ–∑–∞–Ω—è—Ç—ã–π..."
    elif category == 2:
        response += " –õ–∏—á–Ω–æ–µ –ø–æ–¥—Å–æ–±–Ω–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ..."
    elif category == 3:
        response += " –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å..."
    elif category == 4:
        response += " –ò–ü –∏–ª–∏ –ì–ª–∞–≤–∞ –ö–§–•..."
    elif category == 5:
        response += " –Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ –∏–ª–∏ –∫–æ–æ–ø–µ—Ä–∞—Ç–∏–≤..."
    else:
        response = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ—Ç 1 –¥–æ 5."
    await message.reply(response)

# –ö–æ–º–∞–Ω–¥–∞ navigation_map
@dp.message_handler(commands=['navigation_map'])
async def send_navigation_map(message: types.Message):
    navigation_map = InputFile('path_to__navigation_map.png')
    await message.answer_photo(navigation_map, caption="–í–æ—Ç –¥–æ—Ä–æ–∂–Ω–∞—è –∫–∞—Ä—Ç–∞ –≤—Ö–æ–¥–∞ –≤ —á–∞—Ç-–±–æ—Ç–∞. –û–Ω–∞ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è!")

# –ö–æ–º–∞–Ω–¥–∞ info
@dp.message_handler(commands=['info'])
async def send_info(message: types.Message):
    await message.reply("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ: [–æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏, —É—Å–ª–æ–≤–∏–π –ø–æ–ª—É—á–µ–Ω–∏—è, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ —Ç.–¥.]")

# –ö–æ–º–∞–Ω–¥–∞ contact
@dp.message_handler(commands=['contact'])
async def send_contact_info(message: types.Message):
    await message.reply("–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏:\n\n"
                        "üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 123 456 7890\n"
                        "‚úâÔ∏è E-mail: support@example.com\n"
                        "üïò –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: –ü–Ω-–ü—Ç —Å 9:00 –¥–æ 18:00")

# –ö–æ–º–∞–Ω–¥–∞ feedback
@dp.message_handler(commands=['feedback'])
async def request_feedback(message: types.Message):
    await message.reply("–ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∫–∞—Å–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä–∞–Ω—Ç–æ–≤ –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞ –Ω–∏—Ö –æ—Ç–≤–µ—Ç–∏–º.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    await dp.start_polling()

if __name__ == '__main__':
    asyncio.run(main())
